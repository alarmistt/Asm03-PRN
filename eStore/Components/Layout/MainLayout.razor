@inherits LayoutComponentBase
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 d-flex justify-content-end align-items-center">
            <div class="d-flex align-items-center gap-3 position-relative">
                @if (IsAuthenticated)
                {
                    @if (userRole == "User")
                    {
                        <a href="/cart" class="position-relative text-decoration-none text-dark">
                            <span class="cart-icon fs-4">
                                <i class="fas fa-shopping-cart"></i>
                            </span>

                            @if (cartCount > 0)
                            {
                                <span class="badge bg-danger rounded-circle position-absolute"
                                      style="top: -5px; right: -8px; min-width: 18px; height: 18px;
                                        font-size: 12px; display: flex; align-items: center;
                                        justify-content: center; padding: 2px;">
                                    @cartCount
                                </span>
                            }
                        </a>

                    }
                    

                    <span>Welcome, @companyName!</span>

                    <button class="btn btn-link" @onclick="Logout">Logout</button>
                }
                else
                {
                    <a href="/login" class="btn btn-primary">Login</a>
                }
            </div>
        </div>






        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool IsAuthenticated;
    private string companyName;
    private int cartCount = 0;
    private string userRole = "";
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsAuthenticated = user.Identity?.IsAuthenticated == true;
        companyName = IsAuthenticated ? await AuthStateProvider.GetCompanyNameAsync() ?? "N/A" : "N/A";
        userRole = await AuthStateProvider.GetRoleAsync();
    }

    private async Task Logout()
    {
        await AuthStateProvider.LogoutAsync();
        Navigation.NavigateTo("/", forceLoad: true);
    }
}