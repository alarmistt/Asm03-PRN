@page "/order-confirmation"
@using Services.Interface
@using Services.Models.DTO
@using BusinessObject.Entities
@inject IOrderService OrderService
@inject IVnPayService VnPayService
@inject IMemberService MemberService
@inject ICartService CartService
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<style>
    .order-container {
        width: 75%;
        margin: 0 auto;
        padding: 30px;
        font-family: 'Roboto', sans-serif;
        background-color: #f3f7fb;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    h3 {
        text-align: center;
        font-size: 28px;
        color: #2C3E50;
        margin-bottom: 30px;
        font-weight: 500;
    }

    .order-summary {
        background-color: #fff;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 30px;
    }

        .order-summary p {
            font-size: 18px;
            color: #333;
            margin-bottom: 12px;
            line-height: 1.5;
        }

        .order-summary strong {
            font-weight: bold;
            color: #2980B9;
        }

    .order-info {
        padding: 20px;
        border-radius: 8px;
        background-color: #ecf5f9;
        box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.05);
    }

    .order-details {
        margin-top: 40px;
        padding-top: 20px;
        border-top: 2px dashed #ddd;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 30px;
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

        .table th,
        .table td {
            padding: 15px 20px;
            text-align: left;
            font-size: 16px;
            color: #555;
        }

        .table th {
            background-color: #2980B9;
            color: white;
            font-weight: 600;
            text-transform: uppercase;
        }

        .table td {
            background-color: #f9f9f9;
            color: #333;
        }

        .table tr:nth-child(even) td {
            background-color: #f2f2f2;
        }

        .table tr:hover td {
            background-color: #f5f8ff;
            cursor: pointer;
            transform: scale(1.02);
            transition: all 0.3s ease-in-out;
        }

    .order-total {
        font-size: 20px;
        font-weight: 600;
        margin-top: 30px;
        text-align: right;
        color: #2980B9;
    }

    .order-info p {
        font-size: 18px;
    }

    .order-summary strong {
        color: #2c3e50;
    }

    button {
        background-color: #28a745;
        color: white;
        font-size: 16px;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.3s ease;
        display: block;
        margin-left: auto;
        margin-top: 20px;
    }

        button:hover {
            background-color: #218838;
        }

        button:focus {
            outline: none;
        }

</style>

@if (Cart == null || Cart.Items.Count == 0)
{
    <div class="order-container">
        <p class="empty-cart">Empty Order Confirmation!</p>
    </div>
}
else
{
    <div class="order-container">
        <h3>Order Confirmation</h3>

        <div class="order-summary">
            <div class="order-info">
                <p><strong>Company Name:</strong> @companyName</p>
                <p><strong>Address:</strong> @($"{member?.City}, {member.Country}")</p>
            </div>
        </div>

        <div class="order-details">
            <h4>Order Items</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Unit Price</th>
                        <th>Quantity</th>
                        <th>Total Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Cart.Items)
                    {
                        <tr>
                            <td>@item.ProductDTO.ProductName</td>
                            <td>@item.ProductDTO.UnitPrice.ToString("C")</td>
                            <td>@item.Quantity</td>
                            <td>@((item.ProductDTO.UnitPrice * item.Quantity).ToString("C"))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="order-total">
            <p><strong>Total Order:</strong> @Cart.Items.Sum(i => i.ProductDTO.UnitPrice * i.Quantity).ToString("C")</p>
        </div>
        <div class="order-total">
            <p><strong>Freight:</strong> @freight.ToString("C")</p>
        </div>
        <div class="order-total">
            <p><strong>Total Payment:</strong> @((Cart.Items.Sum(i => i.ProductDTO.UnitPrice * i.Quantity) + freight).ToString("C"))</p>
        </div>

        <button @onclick="FinalizeOrder">Place Order</button>
    </div>
}

@code {
    private Order order = new() { OrderDetails = new List<OrderDetail>() };
    private OrderDetail newOrderDetail = new();
    private List<OrderDetail> TempOrderDetails = new();
    private ShoppingCartDTO? Cart;
    private MemberDTO member;
    private int? memberId;
    private string companyName;
    private decimal totalPrice;
    private string paymentUrl = string.Empty;
    private decimal freight = 1;
    private string? paymentMessage;
    private string? iconSuccess;
    private int orderIdToUpdate;
    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        string? responseCode = queryParams["vnp_ResponseCode"];
        if (!string.IsNullOrEmpty(responseCode))
        {
            string orderIdStr = queryParams["vnp_OrderInfo"] ?? "0";
            orderIdToUpdate = int.TryParse(orderIdStr, out var id) ? id : 0;

            if (responseCode == "00")
            {
                paymentMessage = "Payment Successful!";
                iconSuccess = "success";
                if (orderIdToUpdate > 0)
                {
                    await OrderService.UpdateOrderStatus(orderIdToUpdate, "Processing");
                    Console.WriteLine($"Order {orderIdToUpdate} updated to Processing");
                }
            }
            else
            {
                paymentMessage = $"Payment Failed!";
                iconSuccess = "error";
            }
            StateHasChanged();
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            memberId = await AuthStateProvider.GetIdMemberAsync();
            companyName = await AuthStateProvider.GetCompanyNameAsync();
        }
        await LoadMember();
        await LoadCart();




    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(paymentMessage))
        {


            await JSRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thông báo",
                text = paymentMessage,
                icon = iconSuccess,
                confirmButtonText = "OK"
            });


            NavigationManager.NavigateTo("/myorders");


            paymentMessage = null;
        }
    }




    private async Task LoadCart()
    {
        Cart = await CartService.GetCartAsync(memberId.ToString());
    }


    private async Task LoadMember()
    {
        member = await MemberService.GetMember(memberId.Value);
        if (member == null)
        {

            NavigationManager.NavigateTo("/cart");
        }
    }
    private async Task FinalizeOrder()
    {
        foreach (var item in Cart.Items)
        {
            TempOrderDetails.Add(new OrderDetail
                {
                    ProductId = item.ProductDTO.ProductId,
                    Quantity = item.Quantity,
                    UnitPrice = item.ProductDTO.UnitPrice * item.Quantity
                });
        }
        order.MemberId = memberId.Value;
        order.Freight = freight;
        order.OrderDate = DateTime.Now;
        order.RequiredDate = DateTime.Now;
        order.OrderDetails = new List<OrderDetail>(TempOrderDetails);
        Console.WriteLine("Create List order detail");
        order = await OrderService.CreateOrderAsync(order);
        await CartService.ClearCartAsync(memberId.ToString());
        var httpContext = HttpContextAccessor.HttpContext;
        paymentUrl = VnPayService.CreatePaymentUrl(httpContext, order.OrderId, order.CalculateTotalAmount() * 25000);
        NavigationManager.NavigateTo(paymentUrl);
    }
}
