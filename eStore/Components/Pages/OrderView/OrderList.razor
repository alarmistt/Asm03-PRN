@page "/orders"
@using BusinessObject.Entities
@using Services.Interface
@inject IOrderService OrderService
@inject IVnPayService VnPayService 
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@using Microsoft.AspNetCore.SignalR.Client
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
<PageTitle>Order</PageTitle>


<div class="mt-5 container">
    <div class="card bg-light rounded border-0 shadow-sm">
        <div class="card-header bg-warning-subtle text-dark py-3 rounded-top text-center">
            <h3 class="mb-0">Orders</h3>
        </div>
        <div class="card-body">
            <div class="d-flex justify-content-between mb-3">
                <h5 class="text-secondary">Manage your orders efficiently</h5>
                <button class="btn btn-outline-success px-4 fw-bold" @onclick="() => CreateOrder()">
                    <i class="bi bi-plus-lg"></i> Add Order
                </button>
            </div>

            @if (orders == null || !orders.Any())
            {
                <div class="py-5 text-center">
                    <p class="text-muted">No orders available. Start by adding a new one.</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table-bordered table-hover bg-white table text-center align-middle shadow-sm">
                        <thead class="bg-secondary text-white">
                            <tr>
                                <th>Order ID</th>
                                <th>Member ID</th>
                                <th>Order Date</th>
                                <th>Required Date</th>
                                <th>Shipped Date</th>
                                <th>Freight</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in orders)
                            {
                                <tr class="table-row">
                                    <td class="fw-bold">@order.OrderId</td>
                                    <td>@order.MemberId</td>
                                    <td>@order.OrderDate.ToShortDateString()</td>
                                    <td>@order.RequiredDate.ToShortDateString()</td>
                                    <td>@(order.ShippedDate?.ToShortDateString() ?? "N/A")</td>
                                    <td>@order.Freight</td>
                                    <td>@order.Status</td>
                                    <td>
                                        <button class="btn btn-outline-warning btn-sm mx-1" @onclick="() => EditOrder(order.OrderId)">
                                            <i class="bi bi-pencil-square"></i> Edit
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm mx-1" @onclick="() => DeleteOrder(order.OrderId)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                        @if (order.Status == "Pending") 
                                        {
                                            <button class="btn btn-outline-primary btn-sm mx-1" @onclick="() => PayOrder(order.OrderId)">
                                                <i class="bi bi-credit-card"></i> Pay
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .table-row:hover {
        background-color: rgba(13, 110, 253, 0.1);
        transition: background-color 0.3s ease;
    }
</style>

@code {
    private List<Order> orders = new();
    private HubConnection? hubConnection;
    private string? paymentMessage;
    private int orderIdToUpdate;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        string? responseCode = queryParams["vnp_ResponseCode"];
        if (!string.IsNullOrEmpty(responseCode))
        {
            string orderIdStr = queryParams["vnp_OrderInfo"] ?? "0";
            orderIdToUpdate = int.TryParse(orderIdStr, out var id) ? id : 0;

            if (responseCode == "00")
            {
                paymentMessage = "Payment Successful!";
                if (orderIdToUpdate > 0)
                {
                    await OrderService.UpdateOrderStatus(orderIdToUpdate, "Processing");
                    Console.WriteLine($"Order {orderIdToUpdate} updated to Processing");
                }
            }
            else
            {
                paymentMessage = $"Payment Failed!";
            }
            await LoadOrders();
        }
        else
        {
            await LoadOrders();
        }

        await SetupSignalR();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && paymentMessage != null)
        {
            await JSRuntime.InvokeVoidAsync("alert", paymentMessage);
            paymentMessage = null;
        }
    }

    private async Task LoadOrders()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                orders = (await OrderService.GetAllOrdersAsync()).ToList();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching orders: {ex.Message}");
        }
    }

    private void CreateOrder()
    {
        Console.WriteLine("✅ Button Clicked! Navigating to /order/create");
        StateHasChanged();
        NavigationManager.NavigateTo("/order/create");
    }

    private void EditOrder(int orderId)
    {
        Console.WriteLine($"Navigating to /order/edit/{orderId}");
        NavigationManager.NavigateTo($"/order/edit/{orderId}");
    }

    private async Task DeleteOrder(int orderId)
    {
        try
        {
            Console.WriteLine($"Deleting order: {orderId}");
            await OrderService.DeleteOrderAsync(orderId);
            await LoadOrders();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting order: {ex.Message}");
        }
    }

    private async Task PayOrder(int orderId)
    {
        try
        {
            // Lấy thông tin đơn hàng từ danh sách orders
            var order = orders.FirstOrDefault(o => o.OrderId == orderId);
            if (order != null)
            {
                // Giả định Order có phương thức CalculateTotalAmount() như trong /order/create
                var httpContext = HttpContextAccessor.HttpContext;
                string paymentUrl = VnPayService.CreatePaymentUrl(httpContext, order.OrderId, order.CalculateTotalAmount() * 25000);
                NavigationManager.NavigateTo(paymentUrl);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initiating payment: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error initiating payment: {ex.Message}");
        }
    }

    private async Task SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On("ReceiveMessage", async () =>
        {
            Console.WriteLine("🔄 Order list updated!");
            await LoadOrders();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}