@page "/members"
@using BusinessObject.Entities
@using Services.Interface
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JSRuntime
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<CascadingAuthenticationState>
<AuthorizeView Roles="Admin">
        <Authorized Context="authContext">
<div class="container my-5">
    <div class="card shadow-lg border-0 rounded-3" style="background-color: #ffffff; max-width: 1200px; margin: 0 auto;">
        <div class="card-header text-white text-center py-4 rounded-top-3" style="background: linear-gradient(135deg, #4a90e2, #50b5e9);">
            <h3 class="mb-0 fw-light">Members Management</h3>
        </div>
        <div class="card-body p-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h5 class="text-muted fw-normal">Easily manage your members</h5>
                <button class="btn btn-primary fw-semibold rounded-3 px-4" @onclick="CreateMember">
                    <i class="bi bi-person-plus-fill me-2"></i> Add Member
                </button>
            </div>

            <div class="row g-3 mb-4">
                <div class="col-md-3">
                    <input type="text" class="form-control rounded-3" placeholder="Search by Email" @bind="searchEmail" @oninput="async () => await SearchMember()" />
                </div>
                <div class="col-md-3">
                    <input type="text" class="form-control rounded-3" placeholder="Search by Company" @bind="searchCompany" @oninput="async () => await SearchMember()" />
                </div>
                <div class="col-md-3">
                    <input type="text" class="form-control rounded-3" placeholder="Search by City" @bind="searchCity" @oninput="async () => await SearchMember()" />
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-primary w-100 rounded-3" @onclick="SearchMember">
                        <i class="bi bi-search me-2"></i> Search
                    </button>
                </div>
            </div>

            @if (members == null || !members.Any())
            {
                <div class="text-center py-5">
                    <p class="text-muted fst-italic">No members found. Try adjusting your search or add a new member.</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle text-center rounded-3 overflow-hidden">
                        <thead style="background: #4a90e2; color: white;">
                            <tr>
                                <th scope="col">ID</th>
                                <th scope="col">Email</th>
                                <th scope="col">Company</th>
                                <th scope="col">City</th>
                                <th scope="col">Country</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var member in members)
                            {
                                <tr class="table-row">
                                    <td class="fw-semibold">@member.MemberId</td>
                                    <td>@member.Email</td>
                                    <td>@member.CompanyName</td>
                                    <td>@member.City</td>
                                    <td>@member.Country</td>
                                    <td>
                                        <button class="btn btn-outline-warning btn-sm mx-1 rounded-3" @onclick="() => EditMember(member.MemberId)">
                                            <i class="bi bi-pencil me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm mx-1 rounded-3" @onclick="() => ConfirmDelete(member.MemberId)">
                                            <i class="bi bi-trash me-1"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(!hasPreviousPage)">
                        Previous
                    </button>
                    <span>Page @currentPage of @totalPages</span>
                    <button class="btn btn-outline-primary" @onclick="NextPage" disabled="@(!hasNextPage)">
                        Next
                    </button>
                </div>
            }
        </div>
    </div>
</div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger" role="alert">
            You are not authorized to view this page.
        </div>
    </NotAuthorized>
</AuthorizeView>
</CascadingAuthenticationState>
<style>
    body {
    background-color: #f4f7fa;
    }

    .table-row:hover {
    background-color: rgba(74, 144, 226, 0.1);
    transition: background-color 0.3s ease;
    }

    .btn-primary {
    background-color: #4a90e2;
    border-color: #4a90e2;
    }

    .btn-primary:hover {
    background-color: #357abd;
    border-color: #357abd;
    }

    .table th {
    background-color: #4a90e2 !important;
    }
</style>

@code {
    private List<Member> members = new();
    private string searchEmail = string.Empty;
    private string searchCompany = string.Empty;
    private string searchCity = string.Empty;
    private int currentPage = 1;
    private int totalPages = 1;
    private const int pageSize = 3;
    private bool hasPreviousPage => currentPage > 1;
    private bool hasNextPage => currentPage < totalPages;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadMembers();
        await SetupSignalR();
    }

    private async Task LoadMembers()
    {
        try
        {
            await InvokeAsync(async () =>
           {
               var paginatedList = await MemberService.GetMembers(searchEmail, searchCompany, searchCity, currentPage, pageSize);
               members = paginatedList.Items.ToList();
               totalPages = paginatedList.TotalPages;
               StateHasChanged();
           });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching members: {ex.Message}");
        }
    }

    private async Task SearchMember()
    {
        currentPage = 1;
        await LoadMembers();
    }

    private void CreateMember()
    {
        NavigationManager.NavigateTo("/member/edit");
    }

    private void EditMember(int memberId)
    {
        NavigationManager.NavigateTo($"/member/edit/{memberId}");
    }

    private async Task ConfirmDelete(int memberId)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this member?");
        if (confirmDelete)
        {
            await DeleteMember(memberId);
        }
    }

    private async Task DeleteMember(int memberId)
    {
        try
        {
            await MemberService.DeleteMember(memberId);
            await LoadMembers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting member: {ex.Message}");
        }
    }

    private async Task SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On("ReceiveMessage", async () =>
        {
            Console.WriteLine("🔄 Member list updated!");
            await LoadMembers();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task PreviousPage()
    {
        if (hasPreviousPage)
        {
            currentPage--;
            await LoadMembers();
        }
    }

    private async Task NextPage()
    {
        if (hasNextPage)
        {
            currentPage++;
            await LoadMembers();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AuthenticationStateProvider.SetPrerendering(false);
        }
    }
}

