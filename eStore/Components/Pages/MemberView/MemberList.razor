@page "/members"
@using BusinessObject.Entities
@using Services.Interface
@using Microsoft.AspNetCore.Components.Authorization
@inject IMemberService MemberService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<CascadingAuthenticationState>
<AuthorizeView>
    <Authorized>
        <div class="container mt-5">
            <div class="card shadow-sm border-0 rounded bg-light">
                <div class="card-header text-white text-center py-3 rounded-top" style="background-color: #b3541e;">
                    <h3 class="mb-0">Members</h3>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-3">
                        <h5 class="text-secondary">Manage your members efficiently</h5>
                        <button class="btn btn-outline-success px-4 fw-bold" @onclick="() => CreateMember()">
                            <i class="bi bi-plus-lg"></i> Add Member
                        </button>
                    </div>

                    @if (members == null || !members.Any())
                    {
                        <div class="text-center py-5">
                            <p class="text-muted">No members available. Start by adding a new one.</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover align-middle text-center bg-white shadow-sm">
                                <thead style="background-color: #8a3c13; color: white;">
                                    <tr>
                                        <th>Member ID</th>
                                        <th>Email</th>
                                        <th>Company Name</th>
                                        <th>City</th>
                                        <th>Country</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var member in members)
                                    {
                                        <tr class="table-row">
                                            <td class="fw-bold">@member.MemberId</td>
                                            <td>@member.Email</td>
                                            <td>@member.CompanyName</td>
                                            <td>@member.City</td>
                                            <td>@member.Country</td>
                                            <td>
                                                <button class="btn btn-outline-warning btn-sm mx-1" @onclick="() => EditMember(member.MemberId)">
                                                    <i class="bi bi-pencil-square"></i> Edit
                                                </button>
                                                <button class="btn btn-outline-danger btn-sm mx-1" @onclick="() => DeleteMember(member.MemberId)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger" role="alert">
            You are not authorized to view this page.
        </div>
    </NotAuthorized>
</AuthorizeView>
</CascadingAuthenticationState>
<style>
    .table-row:hover {
        background-color: rgba(138, 60, 19, 0.2); /* Màu cam tối nhạt khi hover */
        transition: background-color 0.3s ease;
    }
</style>

@code {
    private List<Member> members = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMembers();
    }

    private async Task LoadMembers()
    {
        try
        {
            members = (await MemberService.GetMembers()).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching members: {ex.Message}");
        }
    }

    private void CreateMember()
    {
        NavigationManager.NavigateTo("/member/edit");
    }

    private void EditMember(int memberId)
    {
        NavigationManager.NavigateTo($"/member/edit/{memberId}");
    }

    private async Task DeleteMember(int memberId)
    {
        try
        {
            await MemberService.DeleteMember(memberId);
            await LoadMembers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting member: {ex.Message}");
        }
    }
}
