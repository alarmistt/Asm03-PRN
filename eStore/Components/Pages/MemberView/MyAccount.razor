@page "/myaccount"
@using BusinessObject.Entities
@using Services.Interface
@using Services.Models.DTO
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IHttpContextAccessor HttpContextAccessor
@inject JwtAuthenticationStateProvider AuthenticationStateProvider

<h3>My Account</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="member" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-6 mb-3">
                <label for="Email" class="form-label fw-semibold text-muted">Email Address</label>
                <InputText id="Email" class="form-control rounded-3" @bind-Value="member.Email" placeholder="Enter email" />
            </div>
            <div class="col-md-6 mb-3">
                <label for="CompanyName" class="form-label fw-semibold text-muted">Company Name</label>
                <InputText id="CompanyName" class="form-control rounded-3" @bind-Value="member.CompanyName" placeholder="Enter company name" />
            </div>
            <div class="col-md-6 mb-3">
                <label for="Country" class="form-label fw-semibold text-muted">Country</label>
                <select id="Country" class="form-select rounded-3" @onchange="OnCountryChanged">
                    <option value="">-- Select a country --</option>
                    @foreach (var country in countries)
                    {
                        <option value="@country.Name.Common" selected="@(member.Country == country.Name.Common)">@country.Name.Common</option>
                    }
                </select>
            </div>
            <div class="col-md-6 mb-3">
                <label for="City" class="form-label fw-semibold text-muted">Province/City</label>
                <select id="City" class="form-select rounded-3" @bind="member.City">
                    <option value="">-- Select a province/city --</option>
                    @foreach (var city in cities)
                    {
                        <option value="@city">@city</option>
                    }
                </select>
            </div>
            <div class="col-12 mb-3">
                <label for="Password" class="form-label fw-semibold text-muted">New Password</label>
                <InputText id="Password" class="form-control rounded-3" type="password" @bind-Value="newPassword" placeholder="Enter new password" />
                <small class="text-muted">Leave blank to keep current password.</small>
            </div>
        </div>

        <div class="d-flex justify-content-end mt-4">
            <button type="submit" class="btn btn-primary rounded-3 px-4" style="background: #4a90e2; border: none;">
                <i class="bi bi-save"></i> Save
            </button>
        </div>
    </EditForm>
}

@code {
    private MemberDTO member = new();
    private List<CountryData> countries = new();
    private List<string> cities = new();
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private string newPassword = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCountries();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user != null)
            {
                var userId = await AuthenticationStateProvider.GetIdRoleAsync();
                if (userId != null)
                {
                    member = await MemberService.GetMember(userId ?? default);
                    if (!string.IsNullOrEmpty(member.Country))
                    {
                        await LoadCities(member.Country);
                    }
                }
                else
                {
                    errorMessage = "User ID not found in token.";
                }
            }
            else
            {
                errorMessage = "User is not authenticated.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading member: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCountries()
    {
        try
        {
            var apiUrl = $"http://api.geonames.org/countryInfoJSON?username=ngocdat0203";
            var response = await Http.GetFromJsonAsync<CountryApiResponse>(apiUrl);

            if (response?.Geonames != null)
            {
                countries = response.Geonames
                    .Select(c => new CountryData { Name = new CountryName { Common = c.CountryName }, Cca2 = c.CountryCode })
                    .OrderBy(c => c.Name.Common)
                    .ToList();
            }
            else
            {
                errorMessage = "No countries found in the response.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading countries: {ex.Message}";
        }
    }

    private async Task OnCountryChanged(ChangeEventArgs e)
    {
        var selectedCountry = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedCountry))
        {
            member.Country = selectedCountry;
            cities.Clear();
            await LoadCities(selectedCountry);
            member.City = cities.Any() ? cities.First() : string.Empty;
        }
        else
        {
            cities.Clear();
            member.City = string.Empty;
        }
        StateHasChanged();
    }

    private async Task LoadCities(string? country)
    {
        cities.Clear();
        if (string.IsNullOrEmpty(country)) return;

        try
        {
            var countryData = countries.FirstOrDefault(c => string.Equals(c.Name.Common, country, StringComparison.OrdinalIgnoreCase));
            if (countryData == null || string.IsNullOrEmpty(countryData.Cca2))
            {
                errorMessage = $"No country code found for {country}";
                Console.WriteLine(errorMessage);
                return;
            }

            var apiUrl = $"http://api.geonames.org/searchJSON?country={countryData.Cca2}&featureClass=A&featureCode=ADM1&maxRows=1000&username=ngocdat0203";
            var response = await Http.GetFromJsonAsync<CityApiResponse>(apiUrl);

            if (response != null && response.Geonames != null)
            {
                cities = response.Geonames
                    .Where(c => !string.IsNullOrEmpty(c.Name))
                    .Select(c => c.Name)
                    .OrderBy(c => c)
                    .ToList();
                Console.WriteLine($"Loaded {cities.Count} cities for {country}");
            }
            else
            {
                errorMessage = $"No cities found for {country}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading cities: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(newPassword))
            {
                member.Password = newPassword;
            }
            else
            {
                member.Password = null;
            }
            await MemberService.UpdateMember(member);
            NavigationManager.NavigateTo("/myaccount");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving member: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner exception: {ex.InnerException.Message}";
            }
            Console.WriteLine(errorMessage);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/myaccount");
    }

    public class CountryApiResponse
    {
        public List<Geoname> Geonames { get; set; } = new List<Geoname>();
    }
    public class Geoname
    {
        public string CountryName { get; set; } = string.Empty;
        public string CountryCode { get; set; } = string.Empty;
    }
    public class CountryData
    {
        public CountryName Name { get; set; } = new CountryName();
        public string Cca2 { get; set; } = string.Empty;
    }

    public class CountryName
    {
        public string Common { get; set; } = string.Empty;
    }

    public class CityApiResponse
    {
        public List<CityData> Geonames { get; set; } = new List<CityData>();
    }

    public class CityData
    {
        public string Name { get; set; } = string.Empty;
    }
}

