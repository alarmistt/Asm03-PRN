@page "/member/edit/{MemberId:int?}"
@using BusinessObject.Entities
@using Services.Interface
@using Services.Models.DTO
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using System.Globalization
@using System.Text

@rendermode InteractiveServer

<div class="container my-5">
    <div class="card shadow-lg border-0 rounded-3" style="background-color: #ffffff; max-width: 700px; margin: 0 auto;">
        <div class="card-header text-white text-center py-4 rounded-top-3" style="background: linear-gradient(135deg, #4a90e2, #50b5e9);">
            <h3 class="mb-0 fw-light">@(MemberId == null ? "Add New Member" : "Edit Member Details")</h3>
        </div>
        <div class="card-body p-4">
            <EditForm Model="member" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="row g-3">
                    <div class="col-md-6 mb-3">
                        <label for="Email" class="form-label fw-semibold text-muted">Email Address</label>
                        <InputText id="Email" class="form-control rounded-3" @bind-Value="member.Email" placeholder="Enter email" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="CompanyName" class="form-label fw-semibold text-muted">Company Name</label>
                        <InputText id="CompanyName" class="form-control rounded-3" @bind-Value="member.CompanyName" placeholder="Enter company name" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="Country" class="form-label fw-semibold text-muted">Country</label>
                        <select id="Country" class="form-select rounded-3" @onchange="OnCountryChanged">
                            <option value="">-- Select a country --</option>
                            @foreach (var country in countries)
                            {
                                <option value="@country.Name.Common" selected="@(member.Country == country.Name.Common)">
                                    @country.Name.Common
                                </option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="City" class="form-label fw-semibold text-muted">Province/City</label>
                        <select id="City" class="form-select rounded-3" @bind="member.City">
                            <option value="">-- Select a province/city --</option>
                            @foreach (var city in cities)
                            {
                                <option value="@city">@city</option>
                            }
                        </select>
                    </div>
                    <div class="col-12 mb-3">
                        <label for="Password" class="form-label fw-semibold text-muted">@(MemberId == null ? "Password" : "New Password")</label>
                        <InputText id="Password" class="form-control rounded-3" type="password" @bind-Value="newPassword" placeholder="@(MemberId == null ? "Enter password" : "Enter new password")" />
                        <small class="text-muted">
                            @(MemberId == null ? "Password is required." : "Leave blank to keep current password.")
                        </small>
                    </div>
                </div>

                <div class="d-flex justify-content-end mt-4">
                    <button type="button" class="btn btn-outline-secondary me-2 rounded-3 px-4" @onclick="Cancel">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    <button type="submit" class="btn btn-primary rounded-3 px-4" style="background: #4a90e2; border: none;">
                        <i class="bi bi-save"></i> Save
                    </button>
                </div>
            </EditForm>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-warning mt-4 rounded-3" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i> @errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? MemberId { get; set; }

    private MemberDTO member = new();
    private List<CountryData> countries = new();
    private List<string> cities = new();
    private string errorMessage = string.Empty;
    private string GeoNamesUsername = "ngocdat0203";
    private string newPassword = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCountries();

        if (MemberId.HasValue)
        {
            try
            {
                member = await MemberService.GetMember(MemberId.Value);
                if (!string.IsNullOrEmpty(member.Country))
                {
                    await LoadCities(member.Country);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading member: {ex.Message}");
            }
        }
    }

    private async Task LoadCountries()
    {
        try
        {
            var apiUrl = $"http://api.geonames.org/countryInfoJSON?username={GeoNamesUsername}";
            var response = await Http.GetFromJsonAsync<CountryApiResponse>(apiUrl);

            if (response?.Geonames != null)
            {
                countries = response.Geonames
                    .Select(c => new CountryData { Name = new CountryName { Common = c.CountryName }, Cca2 = c.CountryCode })
                    .OrderBy(c => c.Name.Common)
                    .ToList();
            }
            else
            {
                errorMessage = "No countries found in the response.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading countries: {ex.Message}";
        }
    }

    private async Task OnCountryChanged(ChangeEventArgs e)
    {
        var selectedCountry = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedCountry))
        {
            member.Country = selectedCountry;
            cities.Clear();
            await LoadCities(selectedCountry);
            member.City = cities.Any() ? cities.First() : string.Empty; // Default to first city if available
        }
        else
        {
            cities.Clear();
            member.City = string.Empty;
        }
        StateHasChanged();
    }

    private async Task LoadCities(string? country)
    {
        cities.Clear();
        if (string.IsNullOrEmpty(country)) return;

        try
        {
            var countryData = countries.FirstOrDefault(c => string.Equals(c.Name.Common, country, StringComparison.OrdinalIgnoreCase));
            if (countryData == null || string.IsNullOrEmpty(countryData.Cca2))
            {
                errorMessage = $"No country code found for {country}";
                Console.WriteLine(errorMessage);
                return;
            }

            var apiUrl = $"http://api.geonames.org/searchJSON?country={countryData.Cca2}&featureClass=A&featureCode=ADM1&maxRows=1000&username={GeoNamesUsername}";
            var response = await Http.GetFromJsonAsync<CityApiResponse>(apiUrl);

            if (response != null && response.Geonames != null)
            {
                cities = response.Geonames
                    .Where(c => !string.IsNullOrEmpty(c.Name))
                    .Select(c => c.Name)
                    .OrderBy(c => c)
                    .ToList();
                Console.WriteLine($"Loaded {cities.Count} cities for {country}");
            }
            else
            {
                errorMessage = $"No cities found for {country}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading cities: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (MemberId.HasValue)
            {
                if (!string.IsNullOrWhiteSpace(newPassword))
                {
                    member.Password = newPassword;
                }
                else
                {
                    member.Password = null;
                }
                await MemberService.UpdateMember(member);
            }
            else
            {
                if (string.IsNullOrWhiteSpace(newPassword))
                {
                    errorMessage = "Password is required.";
                    return;
                }
                member.Password = newPassword;
                await MemberService.AddMember(member);
            }
            NavigationManager.NavigateTo("/members");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving member: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner exception: {ex.InnerException.Message}";
            }
            Console.WriteLine(errorMessage);
        }
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("/members");
    }

    public class CountryApiResponse
    {
        public List<Geoname> Geonames { get; set; } = new List<Geoname>();
    }
    public class Geoname
    {
        public string CountryName { get; set; } = string.Empty;
        public string CountryCode { get; set; } = string.Empty;
    }
    public class CountryData
    {
        public CountryName Name { get; set; } = new CountryName();
        public string Cca2 { get; set; } = string.Empty;
    }

    public class CountryName
    {
        public string Common { get; set; } = string.Empty;
    }

    public class CityApiResponse
    {
        public List<CityData> Geonames { get; set; } = new List<CityData>();
    }

    public class CityData
    {
        public string Name { get; set; } = string.Empty;
    }
}
