@page "/cart"
@using BusinessObject.Entities
@using Services.Interface
@using Services.Models
@using Services.Models.DTO
@inject ICartService CartService
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<style>
    .cart-header {
        font-size: 20px;
        font-weight: bold;
        color: #fff;
        margin-bottom: 15px;
        padding: 10px 0;
        text-align: center;
        background-color: #2ecc71;
        border-radius: 8px;
    }

    .empty-cart {
        text-align: center;
        font-size: 16px;
        color: #888;
        margin-top: 30px;
    }


    .cart-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px;
        margin-bottom: 15px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border: 1px solid #ddd;
        transition: background-color 0.3s;
        max-width: 600px;
        width: 100%;
        margin: 10px auto;
    }

        .cart-item:hover {
            background-color: #ecf9f1;
        }

        .cart-item img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 8px;
        }

    .cart-item-info {
        flex: 1;
        margin-left: 15px;
    }

    .cart-item-title {
        font-size: 16px;
        font-weight: 500;
        color: #333;
        line-height: 1.2;
        max-height: 60px;
        overflow: hidden;
    }

    .cart-item-quantity {
        display: flex;
        align-items: center;
        margin-top: 10px;
    }

    .cart-quantity-btn {
        background-color: #f1f1f1;
        border: 1px solid #ccc;
        border-radius: 50%;
        padding: 8px;
        font-size: 20px;
        cursor: pointer;
        margin: 0 8px;
        transition: background-color 0.3s;
    }

        .cart-quantity-btn:hover {
            background-color: #ddd;
        }

    .cart-price {
        font-size: 16px;
        font-weight: 600;
        color: #333;
        margin-left: 20px;
        text-align: center;
    }

    .cart-delete {
        font-size: 20px;
        color: #e74c3c;
        cursor: pointer;
        transition: color 0.3s;
    }

        .cart-delete:hover {
            color: #c0392b;
        }

    .cart-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 0;
        border-top: 1px solid #ddd;
        margin-top: 15px;
        max-width: 600px;
        margin: 0 auto;
    }

    .total-price {
        font-size: 20px;
        font-weight: bold;
        color: #333;
    }

    .checkout-btn {
        background-color: #2ecc71;
        color: white;
        border: none;
        padding: 12px 25px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .checkout-btn:hover {
            background-color: #27ae60;
        }

</style>

@if (Cart == null || Cart.Items.Count == 0)
{
    <p class="empty-cart">Empty Cart, Please add product!</p>
}
else
{
    <div class="cart-header">Your Cart</div>

    @foreach (var item in Cart.Items)
    {
        <div class="cart-item">
            <img src="@item.ProductDTO.ImageUrl" alt="@item.ProductDTO.ProductName">

            <div class="cart-item-info">
                <div class="cart-item-title">@item.ProductDTO.ProductName</div>

                <div class="cart-item-quantity">
                    <button class="cart-quantity-btn" @onclick="() => DecreaseQuantity(item.ProductDTO.ProductId)">➖</button>
                    <span>@item.Quantity</span>
                    <button class="cart-quantity-btn" @onclick="() => IncreaseQuantity(item.ProductDTO.ProductId)">➕</button>
                </div>
            </div>

            <div class="cart-price">@item.ProductDTO.UnitPrice.ToString("C")</div>

            <div class="cart-delete" @onclick="() => RemoveFromCart(item.ProductDTO.ProductId)">🗑</div>
        </div>
    }

    <div class="cart-footer">
        <div class="total-price">
            Total Price: @Cart.Items.Sum(i => i.ProductDTO.UnitPrice * i.Quantity).ToString("C")
        </div>
        <button class="checkout-btn" @onclick="CreateOrderFromCartAsync">Order</button>
    </div>
}







@code {
    private ShoppingCartDTO? Cart;
    private int? memberId;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            memberId = await AuthStateProvider.GetIdMemberAsync();
        }
        await LoadCart();
    }

    private async Task IncreaseQuantity(int productId)
    {
        await CartService.UpdateCartItemQuantityAsync(memberId.ToString(), productId, 1);
        await LoadCart();
    }

    private async Task DecreaseQuantity(int productId)
    {
        await CartService.UpdateCartItemQuantityAsync(memberId.ToString(), productId, -1);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        Cart = await CartService.GetCartAsync(memberId.ToString());
    }

    private async Task RemoveFromCart(int productId)
    {
        await CartService.RemoveFromCartAsync(memberId.ToString(), productId);
        await LoadCart();
    }

    private async Task ClearCart()
    {
        await CartService.ClearCartAsync(memberId.ToString());
        await LoadCart();
    }
    private async Task CreateOrderFromCartAsync()
    {
        NavigationManager.NavigateTo("/order-confirmation");
    }
}
