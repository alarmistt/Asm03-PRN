@page "/login"
@layout EmptyLayout
@rendermode InteractiveServer
@using Services.Interface
@using eStore.Components.Layout
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager
@inject JwtAuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex vh-100 justify-content-center align-items-center bg-light">
    <div class="card p-4 shadow-sm" style="width: 22rem;">
        <h3 class="text-center">Login</h3>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="text-danger text-center">@ErrorMessage</p>
        }

        <div class="mb-3">
            <input type="text" class="form-control" @bind="Email" placeholder="Enter email" />
        </div>

        <div class="mb-3">
            <input type="password" class="form-control" @bind="Password" placeholder="Enter password" />
        </div>

        <button type="button" @onclick="PerformLogin" class="btn btn-primary w-100">Login</button>

        <p class="mt-3 text-center">
            <a href="/register" class="text-primary">Register</a>
        </p>
    </div>
</div>

@code {
    private string Email { get; set; } = "";
    private string Password { get; set; } = "";
    private string ErrorMessage { get; set; } = "";

    private async Task PerformLogin()
    {
        var result = await AuthService.LoginAsync(Email, Password);
        if (result)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.IsInRole("Admin"))
            {
                NavManager.NavigateTo("/members");
            }
            else
            {
                NavManager.NavigateTo("/orders");
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AuthenticationStateProvider.SetPrerendering(false);
        }
    }
}
