@page "/categories"
@using BusinessObject.Entities
@using Services.Interface
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="container my-5">
    <div class="card shadow-lg border-0 rounded-3" style="background-color: #ffffff; max-width: 1000px; margin: 0 auto;">
        <div class="card-header text-white text-center py-4 rounded-top-3" style="background: linear-gradient(135deg, #4a90e2, #50b5e9);">
            <h3 class="mb-0 fw-light">Categories Management</h3>
        </div>
        <div class="card-body p-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h5 class="text-muted fw-normal">Manage your categories efficiently</h5>
                <button class="btn btn-primary fw-semibold rounded-3 px-4" @onclick="CreateCategory">
                    <i class="bi bi-plus-lg me-2"></i> Add Category
                </button>
            </div>

            <div class="row g-3 mb-4">
                <div class="col-md-9">
                    <input type="text" class="form-control rounded-3" placeholder="Search category by name..."
                           @bind="searchTerm" @oninput="async () => await SearchCategories()" />
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-primary w-100 rounded-3" @onclick="SearchCategories">
                        <i class="bi bi-search me-2"></i> Search
                    </button>
                </div>
            </div>

            @if (categories == null || !categories.Any())
            {
                <div class="text-center py-5">
                    <p class="text-muted fst-italic">No categories available. Start by adding a new one.</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle text-center rounded-3 overflow-hidden">
                        <thead style="background: #4a90e2; color: white;">
                            <tr>
                                <th scope="col">Category ID</th>
                                <th scope="col">Category Name</th>
                                <th scope="col">Description</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in categories)
                            {
                                <tr class="table-row">
                                    <td class="fw-semibold">@category.CategoryId</td>
                                    <td>@category.CategoryName</td>
                                    <td>@category.Description</td>
                                    <td>
                                        <button class="btn btn-outline-warning btn-sm mx-1 rounded-3" @onclick="() => EditCategory(category.CategoryId)">
                                            <i class="bi bi-pencil me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm mx-1 rounded-3" @onclick="() => DeleteCategory(category.CategoryId)">
                                            <i class="bi bi-trash me-1"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<style>
    body {
        background-color: #f4f7fa;
    }

    .table-row:hover {
        background-color: rgba(74, 144, 226, 0.1);
        transition: background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #4a90e2;
        border-color: #4a90e2;
    }

        .btn-primary:hover {
            background-color: #357abd;
            border-color: #357abd;
        }
</style>

@code {
    private List<Category> categories = new();
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = (await CategoryService.GetCategories(searchTerm)).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories: {ex.Message}");
        }
    }

    private async Task SearchCategories()
    {
        await LoadCategories();
    }

    private void CreateCategory()
    {
        Console.WriteLine("✅ Button Clicked! Navigating to /category/edit");
        NavigationManager.NavigateTo("/category/edit");
    }

    private void EditCategory(int categoryId)
    {
        Console.WriteLine($"Navigating to /category/edit/{categoryId}");
        NavigationManager.NavigateTo($"/category/edit/{categoryId}");
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            Console.WriteLine($"Deleting category: {categoryId}");
            await CategoryService.DeleteCategory(categoryId);
            await LoadCategories();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting category: {ex.Message}");
        }
    }
}