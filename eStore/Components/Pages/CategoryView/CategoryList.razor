@page "/categories"
@using BusinessObject.Entities
@using Services.Interface
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@using Services.Models.DTO
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container my-5">
    <div class="card shadow-lg border-0 rounded-3" style="background-color: #ffffff; max-width: 1000px; margin: 0 auto;">
        <div class="card-header text-white text-center py-4 rounded-top-3" style="background: linear-gradient(135deg, #4a90e2, #50b5e9);">
            <h3 class="mb-0 fw-light">Categories Management</h3>
        </div>
        <div class="card-body p-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h5 class="text-muted fw-normal">Manage your categories efficiently</h5>
                <button class="btn btn-primary fw-semibold rounded-3 px-4" @onclick="CreateCategory">
                    <i class="bi bi-plus-lg me-2"></i> Add Category
                </button>
            </div>

            <div class="row g-3 mb-4">
                <div class="col-md-9">
                    <input type="text" class="form-control rounded-3" placeholder="Search category by name..."
                           @bind="searchTerm" @oninput="async () => await SearchCategories()" />
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-primary w-100 rounded-3" @onclick="SearchCategories">
                        <i class="bi bi-search me-2"></i> Search
                    </button>
                </div>
            </div>

            @if (categories == null || !categories.Any())
            {
                <div class="text-center py-5">
                    <p class="text-muted fst-italic">No categories available. Start by adding a new one.</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle text-center rounded-3 overflow-hidden">
                        <thead style="background: #4a90e2; color: white;">
                            <tr>
                                <th scope="col">Category ID</th>
                                <th scope="col">Category Name</th>
                                <th scope="col">Description</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in categories)
                            {
                                <tr class="table-row">
                                    <td class="fw-semibold">@category.CategoryId</td>
                                    <td>@category.CategoryName</td>
                                    <td>@category.Description</td>
                                    <td>
                                        <button class="btn btn-outline-warning btn-sm mx-1 rounded-3" @onclick="() => EditCategory(category.CategoryId)">
                                            <i class="bi bi-pencil me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm mx-1 rounded-3" @onclick="() => ConfirmDeleteCategory(category.CategoryId)">
                                            <i class="bi bi-trash me-1"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <div class="text-muted">
                        Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, totalCount)) of @totalCount categories
                    </div>
                    <nav>
                        <ul class="pagination mb-0 custom-pagination">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                            </li>
                            @foreach (var pageNumber in GetPageNumbers())
                            {
                                if (pageNumber == -1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                                    </li>
                                }
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div>

<style>
    body {
        background-color: #f4f7fa;
    }

    .table-row:hover {
        background-color: rgba(74, 144, 226, 0.1);
        transition: background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #4a90e2;
        border-color: #4a90e2;
    }

        .btn-primary:hover {
            background-color: #357abd;
            border-color: #357abd;
        }

    .custom-pagination .page-item {
        margin: 0 5px;
    }

    .custom-pagination .page-link {
        border-radius: 50% !important;
        border: 1px solid #d1d5db;
        color: #4B5EAA;
        background-color: #ffffff;
        padding: 8px 14px;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

        .custom-pagination .page-link:hover {
            background-color: #4B5EAA;
            color: #ffffff;
            border-color: #4B5EAA;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

    .custom-pagination .page-item.active .page-link {
        background: linear-gradient(135deg, #4B5EAA, #6B7280);
        color: #ffffff;
        border-color: #4B5EAA;
    }

    .custom-pagination .page-item.disabled .page-link {
        background-color: #f3f4f6;
        color: #9ca3af;
        border-color: #d1d5db;
        cursor: not-allowed;
        box-shadow: none;
    }

    .custom-pagination .page-link i {
        font-size: 14px;
    }
</style>

@code {
    private List<CategoryDTO> categories = new();
    private string searchTerm = string.Empty;
    private int currentPage = 1;
    private int totalPages = 1;
    private const int pageSize = 5;
    private bool hasPreviousPage => currentPage > 1;
    private bool hasNextPage => currentPage < totalPages;
    private int totalCount = 0;

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await SetupSignalR();
    }

    private async Task LoadCategories()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                var paginatedList = await CategoryService.GetCategories(searchTerm, currentPage, pageSize);
                categories = paginatedList.Items.ToList();
                totalPages = paginatedList.TotalPages;
                totalCount = paginatedList.TotalCount;
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories: {ex.Message}");
        }
    }

    private async Task SearchCategories()
    {
        currentPage = 1;
        await LoadCategories();
    }

    private void CreateCategory()
    {
        Console.WriteLine("✅ Button Clicked! Navigating to /category/edit");
        NavigationManager.NavigateTo("/category/edit");
    }

    private void EditCategory(int categoryId)
    {
        Console.WriteLine($"Navigating to /category/edit/{categoryId}");
        NavigationManager.NavigateTo($"/category/edit/{categoryId}");
    }

    private async Task ConfirmDeleteCategory(int categoryId)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category?");
        if (confirmDelete)
        {
            await DeleteCategory(categoryId);
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            Console.WriteLine($"Deleting category: {categoryId}");
            await CategoryService.DeleteCategory(categoryId);
            await LoadCategories();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting category: {ex.Message}");
        }
    }

    private async Task SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On("ReceiveMessage", async () =>
        {
            Console.WriteLine("🔄 Category list updated!");
            await LoadCategories();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadCategories();
        }
    }

    private IEnumerable<int> GetPageNumbers()
    {
        var pages = new List<int>();
        if (totalPages <= 3)
        {
            for (int i = 1; i <= totalPages; i++)
            {
                pages.Add(i);
            }
        }
        else
        {
            if (currentPage > 3)
            {
                pages.Add(1);
                pages.Add(-1);
            }

            int start = Math.Max(1, currentPage - 2);
            int end = Math.Min(totalPages, currentPage + 2);
            for (int i = start; i <= end; i++)
            {
                pages.Add(i);
            }

            if (currentPage < totalPages - 2)
            {
                pages.Add(-1);
                pages.Add(totalPages);
            }
        }
        return pages;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
