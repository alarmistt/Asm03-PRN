@page "/category/edit/{CategoryId:int?}"
@using BusinessObject.Entities
@using Services.Interface
@using Services.Models.DTO
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<CascadingAuthenticationState>
            <AuthorizeView Roles="Admin">
                <Authorized Context="EditCateContext">

<div class="container my-5">
    <div class="card shadow-lg border-0 rounded-3" style="background-color: #ffffff; max-width: 600px; margin: 0 auto;">
        <div class="card-header text-white text-center py-4 rounded-top-3" style="background: linear-gradient(135deg, #4a90e2, #50b5e9);">
            <h3 class="mb-0 fw-light">@(CategoryId == null ? "Add New Category" : "Edit Category Details")</h3>
        </div>
        <div class="card-body p-4">
            <EditForm Model="category" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="mb-3">
                    <label for="CategoryName" class="form-label fw-semibold text-muted">Category Name</label>
                    <InputText id="CategoryName" class="form-control rounded-3" @bind-Value="category.CategoryName" placeholder="Enter category name" />
                </div>
                <div class="mb-3">
                    <label for="Description" class="form-label fw-semibold text-muted">Description</label>
                    <InputTextArea id="Description" class="form-control rounded-3" @bind-Value="category.Description" placeholder="Enter description" rows="4" />
                </div>

                <div class="d-flex justify-content-end mt-4">
                    <button type="button" class="btn btn-outline-secondary me-2 rounded-3 px-4" @onclick="Cancel">
                        <i class="bi bi-x-circle me-2"></i> Cancel
                    </button>
                    <button type="submit" class="btn btn-primary rounded-3 px-4" style="background: #4a90e2; border: none;">
                        <i class="bi bi-save me-2"></i> Save
                    </button>
                </div>
            </EditForm>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-warning mt-4 rounded-3" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i> @errorMessage
                </div>
            }
        </div>
    </div>
</div>
        </Authorized>
        <NotAuthorized>
            <p class="text-danger">You do not have permission.</p>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
@code {
    [Parameter]
    public int? CategoryId { get; set; }

    private CategoryDTO category = new();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (CategoryId.HasValue)
        {
            try
            {
                category = await CategoryService.GetCategory(CategoryId.Value);
                Console.WriteLine($"Loaded category: {category.CategoryName}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading category: {ex.Message}");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (CategoryId.HasValue)
            {
                Console.WriteLine($"Updating category: {category.CategoryId}");
                await CategoryService.UpdateCategory(category);
            }
            else
            {
                Console.WriteLine("Creating new category");
                await CategoryService.AddCategory(category);

            }

            NavigationManager.NavigateTo("/categories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving category: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/categories");
    }
}