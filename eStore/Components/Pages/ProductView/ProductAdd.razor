
@page "/product/addnew"
@using BusinessObject.Entities
@using Services.Interface
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="container mt-5">
    <div class="card shadow-sm border-0 rounded" style="background-color: #ffffff;">
        <div class="card-header text-white text-center py-3 rounded-top" style="background-color: #2c3e50;">
            <h3 class="mb-0">Add New Product</h3>
        </div>
        <div class="card-body p-4">
            <EditForm Model="product" OnValidSubmit="HandleValidSubmit" FormName="AddProductForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="mb-4">
                    <label for="CategoryId" class="form-label fw-semibold" style="color: #2c3e50;">Category</label>
                    <InputSelect id="CategoryId" class="form-select shadow-sm" @bind-Value="product.CategoryId" style="border-color: #dcdcdc;">
                        <option value="">Select a category</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => product.CategoryId)" />
                </div>

                <div class="mb-4">
                    <label for="ProductName" class="form-label fw-semibold" style="color: #2c3e50;">Product Name</label>
                    <InputText id="ProductName" class="form-control shadow-sm" @bind-Value="product.ProductName" style="border-color: #dcdcdc;" />
                    <ValidationMessage For="@(() => product.ProductName)" />
                </div>

                <div class="mb-4">
                    <label for="Weight" class="form-label fw-semibold" style="color: #2c3e50;">Weight</label>
                    <InputText id="Weight" class="form-control shadow-sm" @bind-Value="product.Weight" style="border-color: #dcdcdc;" />
                    <ValidationMessage For="@(() => product.Weight)" />
                </div>

                <div class="mb-4">
                    <label for="UnitPrice" class="form-label fw-semibold" style="color: #2c3e50;">Unit Price</label>
                    <InputNumber id="UnitPrice" class="form-control shadow-sm" @bind-Value="product.UnitPrice" style="border-color: #dcdcdc;" min="1" step="0.01" />
                    <ValidationMessage For="@(() => product.UnitPrice)" />
                </div>

                <div class="mb-4">
                    <label for="UnitsInStock" class="form-label fw-semibold" style="color: #2c3e50;">Units In Stock</label>
                    <InputNumber id="UnitsInStock" class="form-control shadow-sm" @bind-Value="product.UnitsInStock" style="border-color: #dcdcdc;" min="1" />
                    <ValidationMessage For="@(() => product.UnitsInStock)" />
                </div>

                <div class="d-flex justify-content-end gap-2">
                    <button type="submit" class="btn px-4 fw-semibold" style="background-color: #27ae60; color: white;">
                        <i class="bi bi-save"></i> Save
                    </button>
                    <a href="/products" class="btn px-4 fw-semibold" style="background-color: #e74c3c; color: white;">Cancel</a>
                </div>
            </EditForm>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-4 shadow-sm" style="border-radius: 8px;">@errorMessage</div>
            }
        </div>
    </div>
</div>

<style>
    .form-control:focus, .form-select:focus {
        border-color: #27ae60;
        box-shadow: 0 0 5px rgba(39, 174, 96, 0.5);
    }

    .card {
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
</style>

@code {
    private Product product = new Product();
    private List<Category> categories = new();
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = (await CategoryService.GetCategories()).ToList();
            product = new Product
                {
                    CategoryId = 0,
                    ProductName = "",
                    Weight = "",
                    UnitPrice = 0,
                    UnitsInStock = 0
                };
            Console.WriteLine("Initialized new product for creation.");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
            Console.WriteLine($"Error loading categories: {ex}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine($"Before save: CategoryId={product.CategoryId}, " +
                            $"ProductName={product.ProductName}, Weight={product.Weight}, " +
                            $"UnitPrice={product.UnitPrice}, UnitsInStock={product.UnitsInStock}");

            // Validate Category
            if (product.CategoryId <= 0)
            {
                errorMessage = "Please select a valid category.";
                return;
            }

            // Validate ProductName
            if (string.IsNullOrEmpty(product.ProductName))
            {
                errorMessage = "Product Name cannot be empty.";
                return;
            }
            if (product.ProductName.All(char.IsDigit))
            {
                errorMessage = "Product Name cannot contain only numbers.";
                return;
            }

            // Validate Weight
            if (string.IsNullOrEmpty(product.Weight))
            {
                errorMessage = "Weight cannot be empty.";
                return;
            }

            // Validate UnitPrice
            if (product.UnitPrice < 1)
            {
                errorMessage = "Unit Price must be 1 or greater.";
                return;
            }

            // Validate UnitsInStock
            if (product.UnitsInStock < 1)
            {
                errorMessage = "Units In Stock must be 1 or greater.";
                return;
            }

            var addedProduct = await ProductService.CreateProductAsync(product);
            Console.WriteLine($"Product added: ID={addedProduct.ProductId}");
            NavigationManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding product: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner exception: {ex.InnerException.Message}";
            }
            Console.WriteLine($"Error adding: {ex}");
        }
    }
}