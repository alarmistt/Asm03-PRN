@using BusinessObject.Entities

@if (IsVisible)
{
    <div class="modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Product</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newProduct" OnValidSubmit="Save">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>Product Name</label>
                            <InputText @bind-Value="newProduct.ProductName" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Category ID</label>
                            <InputNumber @bind-Value="newProduct.CategoryId" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Weight</label>
                            <InputText @bind-Value="newProduct.Weight" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Unit Price</label>
                            <InputNumber @bind-Value="newProduct.UnitPrice" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Units In Stock</label>
                            <InputNumber @bind-Value="newProduct.UnitsInStock" class="form-control" />
                        </div>
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop"></div>
}

<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1000;
        display: block;
    }

    .modal-dialog {
        position: relative;
        width: 500px;
        margin: 50px auto;
        background-color: white;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .modal-content {
        padding: 20px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 10px;
    }

    .modal-title {
        margin: 0;
    }

    .modal-body {
        padding-top: 10px;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 999;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn {
        padding: 6px 12px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<BusinessObject.Entities.Product> OnSave { get; set; }

    private BusinessObject.Entities.Product newProduct = new();

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            newProduct = new BusinessObject.Entities.Product();
        }
    }

    private async Task Save()
    {
        await OnSave.InvokeAsync(newProduct);
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
}