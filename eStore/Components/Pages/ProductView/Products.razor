@page "/products"
@using BusinessObject.Entities
@using Services.Interface
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using Microsoft.AspNetCore.SignalR.Client
@using Services.Models.DTO
@rendermode InteractiveServer

<div class="container-fluid my-5 px-4">
    <div class="card border-0 shadow" style="border-radius: 12px; background-color: #ffffff;">
        <div class="card-header py-4 px-5" style="background: linear-gradient(135deg, #4B5EAA, #6B7280); color: white; border-radius: 12px 12px 0 0;">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="mb-0 fw-normal">Product Management</h3>
                <button class="btn btn-light btn-sm px-4 fw-medium shadow-sm" style="border-radius: 20px; display: flex; align-items: center; justify-content: center;" @onclick="CreateProduct">
                    <i class="bi bi-plus-lg me-2"></i> Add Product
                </button>
            </div>
        </div>

        <div class="px-5 pt-4">
            <div class="row g-3 mb-4">
                <div class="col-md-4">
                    <div class="input-group shadow-sm" style="border-radius: 20px; overflow: hidden;">
                        <span class="input-group-text border-0" style="background-color: #f3f4f6;">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-0" placeholder="Search by product name"
                               @bind="searchName" @bind:event="oninput" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="input-group shadow-sm" style="border-radius: 20px; overflow: hidden;">
                        <span class="input-group-text border-0" style="background-color: #f3f4f6;">
                            <i class="bi bi-currency-dollar text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-0" placeholder="Search by unit price"
                               @bind="searchPriceText" @bind:event="oninput" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="input-group shadow-sm" style="border-radius: 20px; overflow: hidden;">
                        <span class="input-group-text border-0" style="background-color: #f3f4f6;">
                            <i class="bi bi-tag text-muted"></i>
                        </span>
                        <select class="form-select border-0" @bind="selectedCategoryId" @bind:event="onchange">
                            <option value="0">All Categories</option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryId">@category.CategoryName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <button class="btn w-100 fw-medium shadow-sm" style="background-color: #4B5EAA; color: white; border-radius: 20px; display: flex; align-items: center; justify-content: center;" @onclick="ResetFilters">
                        <i class="bi bi-arrow-counterclockwise me-2"></i> Reset
                    </button>
                </div>
            </div>
        </div>

        <!-- Body -->
        <div class="card-body px-5 pb-5">
            @if (filteredProducts == null || !filteredProducts.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-box2-heart display-4 text-muted"></i>
                    <p class="text-muted mt-3 fs-5">
                        @(string.IsNullOrEmpty(searchName) && string.IsNullOrEmpty(searchPriceText) && selectedCategoryId == 0
                            ? "Your product list is empty. Add a new product to get started!"
                            : "No products found matching your criteria.")
                    </p>
                </div>
            }
            else
            {
                <div class="table-responsive" style="border-radius: 12px; overflow: hidden;">
                    <table class="table table-hover align-middle" style="background-color: #ffffff;">
                        <thead style="background-color: #f3f4f6; color: #374151;">
                            <tr>
                                <th scope="col" class="py-3">ID</th>
                                <th scope="col" class="py-3">Category</th>
                                <th scope="col" class="py-3">Name</th>
                                <th scope="col" class="py-3">Weight</th>
                                <th scope="col" class="py-3">Unit Price</th>
                                <th scope="col" class="py-3">In Stock</th>
                                <th scope="col" class="py-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in filteredProducts)
                            {
                                <tr class="table-row">
                                    <td class="fw-medium" style="color: #4B5EAA;">@product.ProductId</td>
                                    <td>@categories.FirstOrDefault(c => c.CategoryId == product.CategoryId)?.CategoryName</td>
                                    <td>@product.ProductName</td>
                                    <td>@product.Weight</td>
                                    <td style="color: #16a34a; font-weight: 500;">@product.UnitPrice.ToString("C")</td>
                                    <td>
                                        <span class="badge px-3 py-1" style="@(product.UnitsInStock > 0 ? "background-color: #dcfce7; color: #16a34a;" : "background-color: #fee2e2; color: #dc2626;") border-radius: 20px;">
                                            @product.UnitsInStock
                                        </span>
                                    </td>
                                    <td>
                                        <div class="d-flex gap-2">
                                            <button class="btn btn-outline-primary btn-sm px-3 fw-medium" style="border-radius: 20px;" @onclick="() => EditProduct(product.ProductId)">
                                                <i class="bi bi-pencil me-1"></i> Edit
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm px-3 fw-medium" style="border-radius: 20px;" @onclick="() => ShowDeleteModal(product.ProductId)">
                                                <i class="bi bi-trash me-1"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="border-radius: 12px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);">
                <div class="modal-header d-flex justify-content-center" style="background-color: #fef2f2; border-bottom: none; border-radius: 12px 12px 0 0;">
                    <h5 class="modal-title fw-medium text-danger text-center">Confirm Deletion</h5>
                    <button type="button" class="btn-close position-absolute end-0 me-3" @onclick="HideDeleteModal"></button>
                </div>
                <div class="modal-body py-4 text-center">
                    @if (!string.IsNullOrEmpty(deleteErrorMessage))
                    {
                        <div class="alert alert-danger mb-3 mx-auto" style="border-radius: 8px; max-width: 80%;">@deleteErrorMessage</div>
                    }
                    else
                    {
                        <p class="mb-0 text-muted">Are you sure you want to delete this product? This action cannot be undone.</p>
                    }
                </div>
                <div class="modal-footer border-0 pt-0 pb-4 d-flex justify-content-center gap-3">
                    <button type="button" class="btn btn-secondary px-4 fw-medium" style="border-radius: 20px;" @onclick="HideDeleteModal">
                        Cancel
                    </button>
                    @if (string.IsNullOrEmpty(deleteErrorMessage))
                    {
                        <button type="button" class="btn btn-danger px-4 fw-medium" style="border-radius: 20px;" @onclick="ConfirmDelete">
                            Delete
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

<style>
    .table-row:hover {
        background-color: #f9fafb;
        transition: background-color 0.2s ease;
    }

    .card {
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);
    }

    th, td {
        border: none !important;
        padding: 12px 16px !important;
    }

    .btn {
        transition: all 0.2s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    .form-control:focus {
        border-color: #4B5EAA;
        box-shadow: 0 0 8px rgba(75, 94, 170, 0.2);
    }

    .input-group, .form-control {
        background-color: #ffffff;
    }

    .modal-content {
        border: none;
    }
</style>

@code {
    private List<Product> products = new();
    private List<Product> filteredProducts = new();
    private List<CategoryDTO> categories = new();
    private HubConnection? hubConnection;

    // Two-way binding properties with automatic filtering
    private string _searchName = "";
    private string searchName
    {
        get => _searchName;
        set
        {
            _searchName = value;
            FilterProducts();
        }
    }

    private string _searchPriceText = "";
    private string searchPriceText
    {
        get => _searchPriceText;
        set
        {
            _searchPriceText = value;
            FilterProducts();
        }
    }

    private int _selectedCategoryId = 0;
    private int selectedCategoryId
    {
        get => _selectedCategoryId;
        set
        {
            _selectedCategoryId = value;
            FilterProducts();
        }
    }

    private bool showDeleteModal = false;
    private int productIdToDelete;
    private string deleteErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await SetupSignalR();
    }

    private async Task LoadProducts()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                products = (await ProductService.GetAllProductsAsync()).ToList();
                categories = (await CategoryService.GetCategories()).ToList();
                FilterProducts();
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error loading products: {ex.Message}";
            StateHasChanged();
        }
    }

    private void FilterProducts()
    {
        filteredProducts = products.Where(p =>
            (string.IsNullOrEmpty(searchName) || p.ProductName.Contains(searchName, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(searchPriceText) || p.UnitPrice.ToString().Contains(searchPriceText)) &&
            (selectedCategoryId == 0 || p.CategoryId == selectedCategoryId)
        ).ToList();
    }

    private void SearchProducts()
    {
        FilterProducts();
        StateHasChanged();
    }

    private void ResetFilters()
    {
        _searchName = "";
        _searchPriceText = "";
        _selectedCategoryId = 0;
        FilterProducts();
        StateHasChanged();
    }

    private void CreateProduct()
    {
        NavigationManager.NavigateTo("/product/addnew");
    }

    private void EditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/product/edit/{productId}");
    }

    private void ShowDeleteModal(int productId)
    {
        productIdToDelete = productId;
        deleteErrorMessage = "";
        showDeleteModal = true;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
        deleteErrorMessage = "";
    }

    private async Task ConfirmDelete()
    {
        try
        {
            bool isProductInOrder = await ProductService.CheckProductInOrderDetailsAsync(productIdToDelete);
            if (isProductInOrder)
            {
                deleteErrorMessage = "This product cannot be deleted because it is referenced in an order.";
                StateHasChanged();
                return;
            }

            await ProductService.DeleteProductAsync(productIdToDelete);
            await LoadProducts();
            showDeleteModal = false;
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error deleting product: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On("ReceiveMessage", async () =>
        {
            Console.WriteLine("🔄 Product list updated!");
            await LoadProducts();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}