
@page "/products"
@using BusinessObject.Entities
@using Services.Interface
@using Services.Models.DTO
@using Microsoft.AspNetCore.SignalR.Client
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-xl-10">
            <div class="card border-0 shadow" style="border-radius: 12px; background-color: #ffffff;">
                <div class="card-header py-4 px-5" style="background: linear-gradient(135deg, #4B5EAA, #6B7280); color: white; border-radius: 12px 12px 0 0;">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="mb-0 fw-normal">Product Management</h3>
                        <button class="btn btn-light btn-sm px-4 fw-medium shadow-sm" style="border-radius: 20px; display: flex; align-items: center; justify-content: center;" @onclick="CreateProduct">
                            <span class="me-2">+</span> Add Product
                        </button>
                    </div>
                </div>

                <div class="px-5 pt-4">
                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <div class="input-group shadow-sm" style="border-radius: 20px; overflow: hidden;">
                                <span class="input-group-text border-0" style="background-color: #f3f4f6;">
                                    <span class="search-icon">🔍</span>
                                </span>
                                <input type="text" class="form-control border-0" placeholder="Search by product name"
                                       @bind="searchName" @bind:event="oninput" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="input-group shadow-sm" style="border-radius: 20px; overflow: hidden;">
                                <span class="input-group-text border-0" style="background-color: #f3f4f6;">
                                    <span class="dollar-icon">$</span>
                                </span>
                                <input type="text" class="form-control border-0" placeholder="Search by unit price"
                                       @bind="searchPriceText" @bind:event="oninput" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="input-group shadow-sm" style="border-radius: 20px; overflow: hidden;">
                                <span class="input-group-text border-0" style="background-color: #f3f4f6;">
                                    <span class="tag-icon">🏷️</span>
                                </span>
                                <select class="form-select border-0" @bind="selectedCategoryId" @bind:event="onchange">
                                    <option value="0">All Categories</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.CategoryId">@category.CategoryName</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-body px-5 pb-5">
                    @if (filteredProducts == null || !filteredProducts.Any())
                    {
                        <div class="text-center py-5">
                            <span class="empty-icon display-4 text-muted">📦</span>
                            <p class="text-muted mt-3 fs-5">
                                @(string.IsNullOrEmpty(searchName) && string.IsNullOrEmpty(searchPriceText) && selectedCategoryId == 0
                                    ? "Your product list is empty. Add a new product to get started!"
                                    : "No products found matching your criteria.")
                            </p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive" style="border-radius: 12px; overflow: hidden;">
                            <table class="table table-hover align-middle" style="background-color: #f3f4f6; color: #374151;">
                                <thead>
                                    <tr>
                                        <th scope="col" class="py-3">ID</th>
                                        <th scope="col" class="py-3">Image</th>
                                        <th scope="col" class="py-3">Category</th>
                                        <th scope="col" class="py-3">Name</th>
                                        <th scope="col" class="py-3">Weight</th>
                                        <th scope="col" class="py-3">Unit Price</th>
                                        <th scope="col" class="py-3">In Stock</th>
                                        <th scope="col" class="py-3">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var product in filteredProducts)
                                    {
                                        <tr class="table-row">
                                            <td class="fw-medium" style="color: #4B5EAA;">@product.ProductId</td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                                {
                                                    <img src="@product.ImageUrl" alt="@product.ProductName" style="max-width: 50px; max-height: 50px; object-fit: cover; border-radius: 4px;" />
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No Image</span>
                                                }
                                            </td>
                                            <td>@product.Category?.CategoryName</td>
                                            <td>@product.ProductName</td>
                                            <td>@product.Weight</td>
                                            <td style="color: #16a34a; font-weight: 500;">@product.UnitPrice.ToString("C")</td>
                                            <td>
                                                <span class="badge px-3 py-1" style="@(product.UnitsInStock > 0 ? "background-color: #dcfce7; color: #16a34a;" : "background-color: #fee2e2; color: #dc2626;") border-radius: 20px;">
                                                    @product.UnitsInStock
                                                </span>
                                            </td>
                                            <td>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-outline-primary btn-sm px-3 fw-medium" style="border-radius: 20px;" @onclick="() => EditProduct(product.ProductId)">
                                                        <span class="edit-icon me-1">✏️</span> Edit
                                                    </button>
                                                    <button class="btn btn-outline-danger btn-sm px-3 fw-medium" style="border-radius: 20px;" @onclick="() => ShowDeleteModal(product.ProductId)">
                                                        <span class="delete-icon me-1">🗑️</span> Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mt-4">
                            <div class="text-muted">
                                Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, totalCount)) of @totalCount products
                            </div>
                            <nav>
                                <ul class="pagination mb-0 custom-pagination">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">
                                            <i class="fas fa-chevron-left"></i>
                                        </button>
                                    </li>
                                    @foreach (var pageNumber in GetPageNumbers())
                                    {
                                        if (pageNumber == -1)
                                        {
                                            <li class="page-item disabled">
                                                <span class="page-link">...</span>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                                            </li>
                                        }
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">
                                            <i class="fas fa-chevron-right"></i>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="border-radius: 12px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);">
                <div class="modal-header d-flex justify-content-center" style="background-color: #fef2f2; border-bottom: none; border-radius: 12px 12px 0 0;">
                    <h5 class="modal-title fw-medium text-danger text-center">Confirm Deletion</h5>
                    <button type="button" class="btn-close position-absolute end-0 me-3" @onclick="HideDeleteModal">×</button>
                </div>
                <div class="modal-body py-4 text-center">
                    @if (!string.IsNullOrEmpty(deleteErrorMessage))
                    {
                        <div class="alert alert-danger mb-3 mx-auto" style="border-radius: 8px; max-width: 80%;">@deleteErrorMessage</div>
                    }
                    else
                    {
                        <p class="mb-0 text-muted">Are you sure you want to delete this product? This action cannot be undone.</p>
                    }
                </div>
                <div class="modal-footer border-0 pt-0 pb-4 d-flex justify-content-center gap-3">
                    <button type="button" class="btn btn-secondary px-4 fw-medium" style="border-radius: 20px;" @onclick="HideDeleteModal">
                        Cancel
                    </button>
                    @if (string.IsNullOrEmpty(deleteErrorMessage))
                    {
                        <button type="button" class="btn btn-danger px-4 fw-medium" style="border-radius: 20px;" @onclick="ConfirmDelete">
                            Delete
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<style>
    .table-row:hover {
        background-color: #f9fafb;
        transition: background-color 0.2s ease;
    }

    .card {
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);
    }

    th, td {
        border: none !important;
        padding: 12px 16px !important;
    }

    .btn {
        transition: all 0.2s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    .form-control:focus {
        border-color: #4B5EAA;
        box-shadow: 0 0 8px rgba(75, 94, 170, 0.2);
    }

    .input-group, .form-control {
        background-color: #ffffff;
    }

    .modal-content {
        border: none;
    }

    .custom-pagination .page-item {
        margin: 0 5px;
    }

    .custom-pagination .page-link {
        border-radius: 50% !important;
        border: 1px solid #d1d5db;
        color: #4B5EAA;
        background-color: #ffffff;
        padding: 8px 14px;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

        .custom-pagination .page-link:hover {
            background-color: #4B5EAA;
            color: #ffffff;
            border-color: #4B5EAA;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

    .custom-pagination .page-item.active .page-link {
        background: linear-gradient(135deg, #4B5EAA, #6B7280);
        color: #ffffff;
        border-color: #4B5EAA;
    }

    .custom-pagination .page-item.disabled .page-link {
        background-color: #f3f4f6;
        color: #9ca3af;
        border-color: #d1d5db;
        cursor: not-allowed;
        box-shadow: none;
    }

    .custom-pagination .page-link i {
        font-size: 14px;
    }

    .col-xl-10 {
        flex: 0 0 auto;
        width: 100%;
    }
</style>

@code {
    private List<ProductDTO> filteredProducts = new();
    private List<CategoryDTO> categories = new();
    private HubConnection? hubConnection;

    private int currentPage = 1;
    private int pageSize = 5;
    private int totalCount = 0;
    private int totalPages => (int)Math.Ceiling((double)totalCount / pageSize);

    private string _searchName = "";
    private string searchName
    {
        get => _searchName;
        set
        {
            _searchName = value;
            currentPage = 1;
            _ = LoadProducts();
        }
    }

    private string _searchPriceText = "";
    private string searchPriceText
    {
        get => _searchPriceText;
        set
        {
            _searchPriceText = value;
            currentPage = 1;
            _ = LoadProducts();
        }
    }

    private int _selectedCategoryId = 0;
    private int selectedCategoryId
    {
        get => _selectedCategoryId;
        set
        {
            _selectedCategoryId = value;
            currentPage = 1;
            _ = LoadProducts();
        }
    }

    private bool showDeleteModal = false;
    private int productIdToDelete;
    private string deleteErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await SetupSignalR();
    }

    private async Task LoadProducts()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                categories = (await CategoryService.GetCategories()).ToList();

                if (string.IsNullOrEmpty(searchName) && string.IsNullOrEmpty(searchPriceText) && selectedCategoryId == 0)
                {
                    var (products, count) = await ProductService.GetAllProductsPageAsync(currentPage, pageSize);
                    filteredProducts = products.ToList();
                    totalCount = count;
                    await JS.InvokeVoidAsync("console.log", $"Loaded {filteredProducts.Count} products (no filter)");
                }
                else
                {
                    var (products, count) = await ProductService.FilterProductsAsync(
                        currentPage,
                        pageSize,
                        searchName,
                        searchPriceText,
                        selectedCategoryId == 0 ? null : selectedCategoryId
                    );
                    filteredProducts = products.ToList();
                    totalCount = count;
                    await JS.InvokeVoidAsync("console.log", $"Loaded {filteredProducts.Count} products (with filter)");
                }

                while (filteredProducts.Count == 0 && currentPage > 1)
                {
                    currentPage--;
                    if (string.IsNullOrEmpty(searchName) && string.IsNullOrEmpty(searchPriceText) && selectedCategoryId == 0)
                    {
                        var (products, count) = await ProductService.GetAllProductsPageAsync(currentPage, pageSize);
                        filteredProducts = products.ToList();
                        totalCount = count;
                    }
                    else
                    {
                        var (products, count) = await ProductService.FilterProductsAsync(
                            currentPage,
                            pageSize,
                            searchName,
                            searchPriceText,
                            selectedCategoryId == 0 ? null : selectedCategoryId
                        );
                        filteredProducts = products.ToList();
                        totalCount = count;
                    }
                    await JS.InvokeVoidAsync("console.log", $"Page {currentPage} loaded with {filteredProducts.Count} products after auto-adjustment");
                }

                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error loading products: {ex.Message}";
            await JS.InvokeVoidAsync("console.log", $"LoadProducts error: {ex.Message}");
            StateHasChanged();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadProducts();
        }
    }

    private void CreateProduct()
    {
        NavigationManager.NavigateTo("/product/addnew");
    }

    private void EditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/product/edit/{productId}");
    }

    private void ShowDeleteModal(int productId)
    {
        productIdToDelete = productId;
        deleteErrorMessage = "";
        showDeleteModal = true;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
        deleteErrorMessage = "";
    }

    private async Task ConfirmDelete()
    {
        try
        {
            bool isProductInOrder = await ProductService.CheckProductInOrderDetailsAsync(productIdToDelete);
            if (isProductInOrder)
            {
                deleteErrorMessage = "This product cannot be deleted because it is referenced in an order.";
                StateHasChanged();
                return;
            }

            var productToDelete = await ProductService.GetProductByIdAsync(productIdToDelete);
            if (productToDelete != null)
            {
                productToDelete.DeletedDate = DateTimeOffset.Now; // Gán ngày hiện tại
                await ProductService.UpdateProductAsync(productToDelete); // Cập nhật vào DB
            }

            await ProductService.DeleteProductAsync(productIdToDelete); // Xóa sản phẩm
            await LoadProducts();
            showDeleteModal = false;
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error deleting product: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On("ReceiveMessage", async () =>
        {
            await JS.InvokeVoidAsync("console.log", "🔄 Product list updated via SignalR!");
            await LoadProducts();
            StateHasChanged();
        });

        try
        {
            await hubConnection.StartAsync();
            await JS.InvokeVoidAsync("console.log", "SignalR connected in products");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"SignalR connection failed in products: {ex.Message}");
        }
    }

    private IEnumerable<int> GetPageNumbers()
    {
        var pages = new List<int>();
        if (totalPages <= 3)
        {
            for (int i = 1; i <= totalPages; i++)
            {
                pages.Add(i);
            }
        }
        else
        {
            if (currentPage > 3)
            {
                pages.Add(1);
                pages.Add(-1);
            }

            int start = Math.Max(1, currentPage - 2);
            int end = Math.Min(totalPages, currentPage + 2);
            for (int i = start; i <= end; i++)
            {
                pages.Add(i);
            }

            if (currentPage < totalPages - 2)
            {
                pages.Add(-1);
                pages.Add(totalPages);
            }
        }
        return pages;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}