@page "/sales-report"
@inject IOrderService OrderService
@using Services.Interface
@using Services.Models.SaleReport

<h3>Sales Report</h3>

<div class="container">
    <EditForm Model="@searchModel" OnValidSubmit="HandleSearch" FormName="salesReportForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">Start Date</label>
                <InputDate class="form-control" @bind-Value="startDate" />
                <p>Selected Start: @(startDate.HasValue ? startDate.Value.ToString("yyyy-MM-dd") : "Not selected")</p>
                <ValidationMessage For="@(() => startDate)" />
            </div>
            <div class="col-md-4">
                <label class="form-label">End Date</label>
                <InputDate class="form-control" @bind-Value="endDate" />
                <p>Selected End: @(endDate.HasValue ? endDate.Value.ToString("yyyy-MM-dd") : "Not selected")</p>
                <ValidationMessage For="@(() => endDate)" />
            </div>
            <div class="col-md-4 align-self-end">
                <button type="submit" class="btn btn-primary">Generate Report</button>
            </div>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }

    @if (salesReports != null)
    {
        <div class="table-responsive">
            <table class="table-striped table">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Total Quantity</th>
                        <th>Total Sales</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var report in salesReports)
                    {
                        <tr>
                            <td>@report.ProductName</td>
                            <td>@report.TotalQuantity</td>
                            <td>@report.TotalSales.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private DateTime? startDate;
    private DateTime? endDate;
    private SearchModel searchModel = new SearchModel();
    private List<SalesReportDto> salesReports;
    private string errorMessage;

    private async Task HandleSearch()
    {
        errorMessage = null;

        Console.WriteLine($"StartDate: {startDate?.ToString("yyyy-MM-dd") ?? "null"}");
        Console.WriteLine($"EndDate: {endDate?.ToString("yyyy-MM-dd") ?? "null"}");

        if (!startDate.HasValue || !endDate.HasValue)
        {
            errorMessage = "Please select both Start Date and End Date.";
            salesReports = null;
            return;
        }

        if (startDate > endDate)
        {
            errorMessage = "Start Date must be earlier than End Date.";
            salesReports = null;
            return;
        }

        salesReports = await OrderService.GetSalesReport(startDate.Value, endDate.Value);
        StateHasChanged();
    }

    private class SearchModel
    {
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }
}
